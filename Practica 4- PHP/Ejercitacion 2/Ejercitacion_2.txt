Ejercicio 2:
Indicar si los siguientes códigos son equivalentes.
a)
1-
<?php
$i = 1;
while ($i <= 10) {
print $i++;
}
?>

2-
<?php
$i = 1;
while ($i <= 10):
print $i;
$i++;
endwhile;
?>

3-
<?php
$i = 0;
do {
print ++$i;
} while ($i<10);
?>

La salida de estos dos codigos es esta:
12345678910
12345678910
12345678910

Se podria decir que son equivalentes, nada mas que son distintas formas de implementar un while.
- while Itera a través de un bloque de código mientras una condición especificada sea verdadera
- do-while El bucle primero ejecuta un bloque de código una vez, en cada caso, luego itera a través de ese bloque de código mientras una condición especificada sea verdadera.

- while : endwhile es una forma de implemetar las funciones nada mas que en ves de usar un llave se coloca el : al lado de la sentencia y el end... al final de la misma

b-
1-
<?php
for ($i = 1; $i <= 10; $i++) {
print $i;
}
?>
2-
<?php
for ($i = 1; ;$i++) {
if ($i > 10) {
break;
}
print $i;
}
?>
3-
<?php
$i = 1;
for (;;) {
if ($i > 10) {
break;
}
print $i;
$i++;
}
?>
4-
<?php
for ($i = 1; $i <= 10; print $i, $i++) ;
?>

La salida de los for es esta:
12345678910
12345678910
12345678910
12345678910
 En la forma 1 del for es la normal , la forma 2 es sacando el farametro de fin y rompiendo el bucle con el for cuando se cumple el if, y en la forma 3 se inicializa antes del bucle y despues la implementa los que se utiliza en las anteriores formas
 La forma 4 es hace todo en una sola linea donde el primer parametro inicializa el segundo la condicion de fin y los paramatros donde esta  la , son los metodos que se hacen en la funcion



c-
<?php
…
…
if ($i == 0) {
print "i equals 0";
} elseif ($i == 1) {
print "i equals 1";
} elseif ($i == 2) {
print "i equals 2";
}
?>
<?php
…
…
switch ($i) {
case 0:
print "i equals 0";
break;
case 1:
print "i equals 1";
break;
case 2:
print "i equals 2";
break;
}
?>
Ambas estructuras son equivalentes en términos de funcionalidad básica (ambas comparan el valor de $i y ejecutan el bloque de código correspondiente).
- switch para claridad en comparaciones múltiples de un mismo valor.
- if-elseif para condiciones complejas o pocas opciones.